//
// Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
//
//
// Ports:
// Name                         I/O  size props
// RDY_reset                      O     1 const
// av_read                        O    32
// RDY_av_read                    O     1
// RDY_write                      O     1
// master_aw_canPeek              O     1 reg
// master_aw_peek                 O    97 reg
// RDY_master_aw_peek             O     1 reg
// RDY_master_aw_drop             O     1 reg
// master_w_canPeek               O     1 reg
// master_w_peek                  O    74 reg
// RDY_master_w_peek              O     1 reg
// RDY_master_w_drop              O     1 reg
// master_b_canPut                O     1 reg
// RDY_master_b_put               O     1 reg
// master_ar_canPeek              O     1 reg
// master_ar_peek                 O    97 reg
// RDY_master_ar_peek             O     1 reg
// RDY_master_ar_drop             O     1 reg
// master_r_canPut                O     1 reg
// RDY_master_r_put               O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// av_read_dm_addr                I     7
// write_dm_addr                  I     7
// write_dm_word                  I    32
// master_b_put_val               I     6 reg
// master_r_put_val               I    72 reg
// EN_reset                       I     1
// EN_write                       I     1
// EN_master_aw_drop              I     1
// EN_master_w_drop               I     1
// EN_master_b_put                I     1
// EN_master_ar_drop              I     1
// EN_master_r_put                I     1
// EN_av_read                     I     1
//
// Combinational paths from inputs to outputs:
//   av_read_dm_addr -> av_read
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDM_System_Bus(CLK,
		       RST_N,

		       EN_reset,
		       RDY_reset,

		       av_read_dm_addr,
		       EN_av_read,
		       av_read,
		       RDY_av_read,

		       write_dm_addr,
		       write_dm_word,
		       EN_write,
		       RDY_write,

		       master_aw_canPeek,

		       master_aw_peek,
		       RDY_master_aw_peek,

		       EN_master_aw_drop,
		       RDY_master_aw_drop,

		       master_w_canPeek,

		       master_w_peek,
		       RDY_master_w_peek,

		       EN_master_w_drop,
		       RDY_master_w_drop,

		       master_b_canPut,

		       master_b_put_val,
		       EN_master_b_put,
		       RDY_master_b_put,

		       master_ar_canPeek,

		       master_ar_peek,
		       RDY_master_ar_peek,

		       EN_master_ar_drop,
		       RDY_master_ar_drop,

		       master_r_canPut,

		       master_r_put_val,
		       EN_master_r_put,
		       RDY_master_r_put);
  input  CLK;
  input  RST_N;

  // action method reset
  input  EN_reset;
  output RDY_reset;

  // actionvalue method av_read
  input  [6 : 0] av_read_dm_addr;
  input  EN_av_read;
  output [31 : 0] av_read;
  output RDY_av_read;

  // action method write
  input  [6 : 0] write_dm_addr;
  input  [31 : 0] write_dm_word;
  input  EN_write;
  output RDY_write;

  // value method master_aw_canPeek
  output master_aw_canPeek;

  // value method master_aw_peek
  output [96 : 0] master_aw_peek;
  output RDY_master_aw_peek;

  // action method master_aw_drop
  input  EN_master_aw_drop;
  output RDY_master_aw_drop;

  // value method master_w_canPeek
  output master_w_canPeek;

  // value method master_w_peek
  output [73 : 0] master_w_peek;
  output RDY_master_w_peek;

  // action method master_w_drop
  input  EN_master_w_drop;
  output RDY_master_w_drop;

  // value method master_b_canPut
  output master_b_canPut;

  // action method master_b_put
  input  [5 : 0] master_b_put_val;
  input  EN_master_b_put;
  output RDY_master_b_put;

  // value method master_ar_canPeek
  output master_ar_canPeek;

  // value method master_ar_peek
  output [96 : 0] master_ar_peek;
  output RDY_master_ar_peek;

  // action method master_ar_drop
  input  EN_master_ar_drop;
  output RDY_master_ar_drop;

  // value method master_r_canPut
  output master_r_canPut;

  // action method master_r_put
  input  [71 : 0] master_r_put_val;
  input  EN_master_r_put;
  output RDY_master_r_put;

  // signals for module outputs
  reg [31 : 0] av_read;
  wire [96 : 0] master_ar_peek, master_aw_peek;
  wire [73 : 0] master_w_peek;
  wire RDY_av_read,
       RDY_master_ar_drop,
       RDY_master_ar_peek,
       RDY_master_aw_drop,
       RDY_master_aw_peek,
       RDY_master_b_put,
       RDY_master_r_put,
       RDY_master_w_drop,
       RDY_master_w_peek,
       RDY_reset,
       RDY_write,
       master_ar_canPeek,
       master_aw_canPeek,
       master_b_canPut,
       master_r_canPut,
       master_w_canPeek;

  // register rg_sb_state
  reg [1 : 0] rg_sb_state;
  wire [1 : 0] rg_sb_state$D_IN;
  wire rg_sb_state$EN;

  // register rg_sbaddress0
  reg [31 : 0] rg_sbaddress0;
  reg [31 : 0] rg_sbaddress0$D_IN;
  wire rg_sbaddress0$EN;

  // register rg_sbaddress1
  reg [31 : 0] rg_sbaddress1;
  reg [31 : 0] rg_sbaddress1$D_IN;
  wire rg_sbaddress1$EN;

  // register rg_sbaddress_reading
  reg [63 : 0] rg_sbaddress_reading;
  wire [63 : 0] rg_sbaddress_reading$D_IN;
  wire rg_sbaddress_reading$EN;

  // register rg_sbcs_sbaccess
  reg [2 : 0] rg_sbcs_sbaccess;
  wire [2 : 0] rg_sbcs_sbaccess$D_IN;
  wire rg_sbcs_sbaccess$EN;

  // register rg_sbcs_sbautoincrement
  reg rg_sbcs_sbautoincrement;
  wire rg_sbcs_sbautoincrement$D_IN, rg_sbcs_sbautoincrement$EN;

  // register rg_sbcs_sbbusyerror
  reg rg_sbcs_sbbusyerror;
  reg rg_sbcs_sbbusyerror$D_IN;
  wire rg_sbcs_sbbusyerror$EN;

  // register rg_sbcs_sberror
  reg [2 : 0] rg_sbcs_sberror;
  reg [2 : 0] rg_sbcs_sberror$D_IN;
  wire rg_sbcs_sberror$EN;

  // register rg_sbcs_sbreadonaddr
  reg rg_sbcs_sbreadonaddr;
  wire rg_sbcs_sbreadonaddr$D_IN, rg_sbcs_sbreadonaddr$EN;

  // register rg_sbcs_sbreadondata
  reg rg_sbcs_sbreadondata;
  wire rg_sbcs_sbreadondata$D_IN, rg_sbcs_sbreadondata$EN;

  // register rg_sbdata0
  reg [31 : 0] rg_sbdata0;
  reg [31 : 0] rg_sbdata0$D_IN;
  wire rg_sbdata0$EN;

  // ports of submodule masterPortShim_arff
  wire [96 : 0] masterPortShim_arff$D_IN, masterPortShim_arff$D_OUT;
  wire masterPortShim_arff$CLR,
       masterPortShim_arff$DEQ,
       masterPortShim_arff$EMPTY_N,
       masterPortShim_arff$ENQ,
       masterPortShim_arff$FULL_N;

  // ports of submodule masterPortShim_awff
  wire [96 : 0] masterPortShim_awff$D_IN, masterPortShim_awff$D_OUT;
  wire masterPortShim_awff$CLR,
       masterPortShim_awff$DEQ,
       masterPortShim_awff$EMPTY_N,
       masterPortShim_awff$ENQ,
       masterPortShim_awff$FULL_N;

  // ports of submodule masterPortShim_bff
  wire [5 : 0] masterPortShim_bff$D_IN, masterPortShim_bff$D_OUT;
  wire masterPortShim_bff$CLR,
       masterPortShim_bff$DEQ,
       masterPortShim_bff$EMPTY_N,
       masterPortShim_bff$ENQ,
       masterPortShim_bff$FULL_N;

  // ports of submodule masterPortShim_rff
  wire [71 : 0] masterPortShim_rff$D_IN, masterPortShim_rff$D_OUT;
  wire masterPortShim_rff$CLR,
       masterPortShim_rff$DEQ,
       masterPortShim_rff$EMPTY_N,
       masterPortShim_rff$ENQ,
       masterPortShim_rff$FULL_N;

  // ports of submodule masterPortShim_wff
  wire [73 : 0] masterPortShim_wff$D_IN, masterPortShim_wff$D_OUT;
  wire masterPortShim_wff$CLR,
       masterPortShim_wff$DEQ,
       masterPortShim_wff$EMPTY_N,
       masterPortShim_wff$ENQ,
       masterPortShim_wff$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_sb_read_finish,
       CAN_FIRE_RL_rl_sb_write_response,
       CAN_FIRE_av_read,
       CAN_FIRE_master_ar_drop,
       CAN_FIRE_master_aw_drop,
       CAN_FIRE_master_b_put,
       CAN_FIRE_master_r_put,
       CAN_FIRE_master_w_drop,
       CAN_FIRE_reset,
       CAN_FIRE_write,
       WILL_FIRE_RL_rl_sb_read_finish,
       WILL_FIRE_RL_rl_sb_write_response,
       WILL_FIRE_av_read,
       WILL_FIRE_master_ar_drop,
       WILL_FIRE_master_aw_drop,
       WILL_FIRE_master_b_put,
       WILL_FIRE_master_r_put,
       WILL_FIRE_master_w_drop,
       WILL_FIRE_reset,
       WILL_FIRE_write;

  // inputs to muxes for submodule ports
  reg [31 : 0] MUX_rg_sbaddress0$write_1__VAL_2,
	       MUX_rg_sbaddress1$write_1__VAL_2;
  reg [2 : 0] MUX_rg_sbcs_sberror$write_1__VAL_4;
  wire [96 : 0] MUX_masterPortShim_arff$enq_1__VAL_1,
		MUX_masterPortShim_arff$enq_1__VAL_2;
  wire MUX_masterPortShim_arff$enq_1__SEL_1,
       MUX_rg_sbaddress0$write_1__SEL_2,
       MUX_rg_sbaddress0$write_1__SEL_3,
       MUX_rg_sbaddress1$write_1__SEL_2,
       MUX_rg_sbcs_sbbusyerror$write_1__SEL_2,
       MUX_rg_sbcs_sbbusyerror$write_1__SEL_3,
       MUX_rg_sbcs_sberror$write_1__SEL_2,
       MUX_rg_sbcs_sberror$write_1__SEL_3,
       MUX_rg_sbcs_sberror$write_1__SEL_4,
       MUX_rg_sbdata0$write_1__SEL_3;

  // remaining internal signals
  reg [63 : 0] CASE_rg_sbaddress_reading_BITS_2_TO_0_0x0_resu_ETC__q1,
	       IF_rg_sbaddress_reading_9_BITS_2_TO_0_0_EQ_0x0_ETC___d62,
	       IF_rg_sbaddress_reading_9_BITS_2_TO_0_0_EQ_0x0_ETC___d75,
	       IF_rg_sbcs_sbaccess_7_EQ_0_8_THEN_1_ELSE_IF_rg_ETC___d114,
	       IF_rg_sbcs_sbaccess_7_EQ_0_8_THEN_IF_rg_sbaddr_ETC___d88,
	       wrd_wdata__h4762;
  reg [7 : 0] wrd_wstrb__h4763;
  reg [2 : 0] _theResult___snd_snd_val__h4720;
  wire [63 : 0] _theResult___fst__h4705,
		addr64__h3970,
		result__h1228,
		result__h1258,
		result__h1285,
		result__h1312,
		result__h1339,
		result__h1366,
		result__h1393,
		result__h1420,
		result__h1465,
		result__h1492,
		result__h1519,
		result__h1546,
		result__h1587,
		result__h1614,
		rg_sbaddress1_08_CONCAT_rg_sbaddress0_09_10_PL_ETC___d115,
		rg_sbaddress1_08_CONCAT_write_dm_word_06_PLUS__ETC___d307,
		sbaddress__h630,
		word64__h4650;
  wire [31 : 0] IF_rg_sbcs_sbreadonaddr_32_THEN_IF_rg_sbcs_sba_ETC___d318,
		IF_write_dm_addr_EQ_0x39_66_THEN_rg_sbaddress1_ETC___d309,
		v__h2261,
		v__h2374;
  wire [7 : 0] strobe64__h4703, strobe64__h4707, strobe64__h4711;
  wire [5 : 0] shift_bits__h4653;
  wire rg_sb_state_EQ_0_8_AND_NOT_rg_sbcs_sbbusyerror_ETC___d106,
       rg_sb_state_EQ_0_8_AND_NOT_rg_sbcs_sbbusyerror_ETC___d121,
       rg_sb_state_EQ_0_8_AND_NOT_rg_sbcs_sbbusyerror_ETC___d324,
       rg_sbcs_sberror_EQ_0_AND_rg_sbcs_sbreadonaddr__ETC___d299,
       write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d264,
       write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d273,
       write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d279,
       write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d281,
       write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d286,
       write_dm_addr_EQ_0x3C_69_AND_rg_sb_state_EQ_0__ETC___d334;

  // action method reset
  assign RDY_reset = 1'd1 ;
  assign CAN_FIRE_reset = 1'd1 ;
  assign WILL_FIRE_reset = EN_reset ;

  // actionvalue method av_read
  always@(av_read_dm_addr or
	  v__h2261 or rg_sbaddress0 or rg_sbaddress1 or v__h2374)
  begin
    case (av_read_dm_addr)
      7'h38: av_read = v__h2261;
      7'h39: av_read = rg_sbaddress0;
      7'h3A: av_read = rg_sbaddress1;
      7'h3C: av_read = v__h2374;
      default: av_read = 32'd0;
    endcase
  end
  assign RDY_av_read =
	     rg_sb_state == 2'd0 &&
	     (rg_sbcs_sbbusyerror || rg_sbcs_sberror != 3'd0 ||
	      !rg_sbcs_sbreadondata ||
	      masterPortShim_arff$FULL_N) ;
  assign CAN_FIRE_av_read = RDY_av_read ;
  assign WILL_FIRE_av_read = EN_av_read ;

  // action method write
  assign RDY_write = CAN_FIRE_write && !WILL_FIRE_RL_rl_sb_read_finish ;
  assign CAN_FIRE_write =
	     (rg_sb_state != 2'd0 || rg_sbcs_sbbusyerror ||
	      rg_sbcs_sberror != 3'd0 ||
	      !rg_sbcs_sbreadonaddr ||
	      masterPortShim_arff$FULL_N) &&
	     (rg_sb_state != 2'd0 || rg_sbcs_sbbusyerror ||
	      rg_sbcs_sberror != 3'd0 ||
	      masterPortShim_awff$FULL_N && masterPortShim_wff$FULL_N) ;
  assign WILL_FIRE_write = EN_write ;

  // value method master_aw_canPeek
  assign master_aw_canPeek = masterPortShim_awff$EMPTY_N ;

  // value method master_aw_peek
  assign master_aw_peek = masterPortShim_awff$D_OUT ;
  assign RDY_master_aw_peek = masterPortShim_awff$EMPTY_N ;

  // action method master_aw_drop
  assign RDY_master_aw_drop = masterPortShim_awff$EMPTY_N ;
  assign CAN_FIRE_master_aw_drop = masterPortShim_awff$EMPTY_N ;
  assign WILL_FIRE_master_aw_drop = EN_master_aw_drop ;

  // value method master_w_canPeek
  assign master_w_canPeek = masterPortShim_wff$EMPTY_N ;

  // value method master_w_peek
  assign master_w_peek = masterPortShim_wff$D_OUT ;
  assign RDY_master_w_peek = masterPortShim_wff$EMPTY_N ;

  // action method master_w_drop
  assign RDY_master_w_drop = masterPortShim_wff$EMPTY_N ;
  assign CAN_FIRE_master_w_drop = masterPortShim_wff$EMPTY_N ;
  assign WILL_FIRE_master_w_drop = EN_master_w_drop ;

  // value method master_b_canPut
  assign master_b_canPut = masterPortShim_bff$FULL_N ;

  // action method master_b_put
  assign RDY_master_b_put = masterPortShim_bff$FULL_N ;
  assign CAN_FIRE_master_b_put = masterPortShim_bff$FULL_N ;
  assign WILL_FIRE_master_b_put = EN_master_b_put ;

  // value method master_ar_canPeek
  assign master_ar_canPeek = masterPortShim_arff$EMPTY_N ;

  // value method master_ar_peek
  assign master_ar_peek = masterPortShim_arff$D_OUT ;
  assign RDY_master_ar_peek = masterPortShim_arff$EMPTY_N ;

  // action method master_ar_drop
  assign RDY_master_ar_drop = masterPortShim_arff$EMPTY_N ;
  assign CAN_FIRE_master_ar_drop = masterPortShim_arff$EMPTY_N ;
  assign WILL_FIRE_master_ar_drop = EN_master_ar_drop ;

  // value method master_r_canPut
  assign master_r_canPut = masterPortShim_rff$FULL_N ;

  // action method master_r_put
  assign RDY_master_r_put = masterPortShim_rff$FULL_N ;
  assign CAN_FIRE_master_r_put = masterPortShim_rff$FULL_N ;
  assign WILL_FIRE_master_r_put = EN_master_r_put ;

  // submodule masterPortShim_arff
  FIFO2 #(.width(32'd97), .guarded(1'd1)) masterPortShim_arff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(masterPortShim_arff$D_IN),
							      .ENQ(masterPortShim_arff$ENQ),
							      .DEQ(masterPortShim_arff$DEQ),
							      .CLR(masterPortShim_arff$CLR),
							      .D_OUT(masterPortShim_arff$D_OUT),
							      .FULL_N(masterPortShim_arff$FULL_N),
							      .EMPTY_N(masterPortShim_arff$EMPTY_N));

  // submodule masterPortShim_awff
  FIFO2 #(.width(32'd97), .guarded(1'd1)) masterPortShim_awff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(masterPortShim_awff$D_IN),
							      .ENQ(masterPortShim_awff$ENQ),
							      .DEQ(masterPortShim_awff$DEQ),
							      .CLR(masterPortShim_awff$CLR),
							      .D_OUT(masterPortShim_awff$D_OUT),
							      .FULL_N(masterPortShim_awff$FULL_N),
							      .EMPTY_N(masterPortShim_awff$EMPTY_N));

  // submodule masterPortShim_bff
  FIFO2 #(.width(32'd6), .guarded(1'd1)) masterPortShim_bff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(masterPortShim_bff$D_IN),
							    .ENQ(masterPortShim_bff$ENQ),
							    .DEQ(masterPortShim_bff$DEQ),
							    .CLR(masterPortShim_bff$CLR),
							    .D_OUT(masterPortShim_bff$D_OUT),
							    .FULL_N(masterPortShim_bff$FULL_N),
							    .EMPTY_N(masterPortShim_bff$EMPTY_N));

  // submodule masterPortShim_rff
  FIFO2 #(.width(32'd72), .guarded(1'd1)) masterPortShim_rff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(masterPortShim_rff$D_IN),
							     .ENQ(masterPortShim_rff$ENQ),
							     .DEQ(masterPortShim_rff$DEQ),
							     .CLR(masterPortShim_rff$CLR),
							     .D_OUT(masterPortShim_rff$D_OUT),
							     .FULL_N(masterPortShim_rff$FULL_N),
							     .EMPTY_N(masterPortShim_rff$EMPTY_N));

  // submodule masterPortShim_wff
  FIFO2 #(.width(32'd74), .guarded(1'd1)) masterPortShim_wff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(masterPortShim_wff$D_IN),
							     .ENQ(masterPortShim_wff$ENQ),
							     .DEQ(masterPortShim_wff$DEQ),
							     .CLR(masterPortShim_wff$CLR),
							     .D_OUT(masterPortShim_wff$D_OUT),
							     .FULL_N(masterPortShim_wff$FULL_N),
							     .EMPTY_N(masterPortShim_wff$EMPTY_N));

  // rule RL_rl_sb_read_finish
  assign CAN_FIRE_RL_rl_sb_read_finish =
	     masterPortShim_rff$EMPTY_N && rg_sb_state == 2'd1 &&
	     rg_sbcs_sberror == 3'd0 ;
  assign WILL_FIRE_RL_rl_sb_read_finish = CAN_FIRE_RL_rl_sb_read_finish ;

  // rule RL_rl_sb_write_response
  assign CAN_FIRE_RL_rl_sb_write_response = masterPortShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_rl_sb_write_response = masterPortShim_bff$EMPTY_N ;

  // inputs to muxes for submodule ports
  assign MUX_masterPortShim_arff$enq_1__SEL_1 =
	     EN_av_read && av_read_dm_addr == 7'h3C &&
	     rg_sb_state_EQ_0_8_AND_NOT_rg_sbcs_sbbusyerror_ETC___d121 ;
  assign MUX_rg_sbaddress0$write_1__SEL_2 =
	     EN_write && write_dm_addr != 7'h38 &&
	     (rg_sb_state == 2'd0 && !rg_sbcs_sbbusyerror &&
	      rg_sbcs_sberror == 3'd0 &&
	      write_dm_addr == 7'h39 ||
	      write_dm_addr == 7'h3C &&
	      rg_sb_state_EQ_0_8_AND_NOT_rg_sbcs_sbbusyerror_ETC___d106) ;
  assign MUX_rg_sbaddress0$write_1__SEL_3 =
	     EN_av_read && av_read_dm_addr == 7'h3C &&
	     rg_sb_state_EQ_0_8_AND_NOT_rg_sbcs_sbbusyerror_ETC___d106 ;
  assign MUX_rg_sbaddress1$write_1__SEL_2 =
	     EN_write && write_dm_addr != 7'h38 &&
	     ((write_dm_addr == 7'h39 || write_dm_addr == 7'h3A) &&
	      rg_sb_state == 2'd0 &&
	      !rg_sbcs_sbbusyerror &&
	      rg_sbcs_sberror_EQ_0_AND_rg_sbcs_sbreadonaddr__ETC___d299 ||
	      write_dm_addr == 7'h3C &&
	      rg_sb_state_EQ_0_8_AND_NOT_rg_sbcs_sbbusyerror_ETC___d106) ;
  assign MUX_rg_sbcs_sbbusyerror$write_1__SEL_2 =
	     EN_write &&
	     write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d273 ;
  assign MUX_rg_sbcs_sbbusyerror$write_1__SEL_3 =
	     EN_av_read && av_read_dm_addr == 7'h3C && rg_sb_state != 2'd0 ;
  assign MUX_rg_sbcs_sberror$write_1__SEL_2 =
	     masterPortShim_bff$EMPTY_N &&
	     masterPortShim_bff$D_OUT[1:0] != 2'd0 ;
  assign MUX_rg_sbcs_sberror$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_sb_read_finish &&
	     masterPortShim_rff$D_OUT[3:2] != 2'd0 ;
  assign MUX_rg_sbcs_sberror$write_1__SEL_4 =
	     EN_write &&
	     write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d281 ;
  assign MUX_rg_sbdata0$write_1__SEL_3 =
	     EN_write &&
	     write_dm_addr_EQ_0x3C_69_AND_rg_sb_state_EQ_0__ETC___d334 ;
  assign MUX_masterPortShim_arff$enq_1__VAL_1 =
	     { 4'd0, sbaddress__h630, 8'd0, rg_sbcs_sbaccess, 18'd65536 } ;
  assign MUX_masterPortShim_arff$enq_1__VAL_2 =
	     { 4'd0, addr64__h3970, 8'd0, rg_sbcs_sbaccess, 18'd65536 } ;
  always@(write_dm_addr or
	  rg_sbaddress1_08_CONCAT_rg_sbaddress0_09_10_PL_ETC___d115 or
	  IF_rg_sbcs_sbreadonaddr_32_THEN_IF_rg_sbcs_sba_ETC___d318)
  begin
    case (write_dm_addr)
      7'h39, 7'h3A:
	  MUX_rg_sbaddress0$write_1__VAL_2 =
	      IF_rg_sbcs_sbreadonaddr_32_THEN_IF_rg_sbcs_sba_ETC___d318;
      default: MUX_rg_sbaddress0$write_1__VAL_2 =
		   rg_sbaddress1_08_CONCAT_rg_sbaddress0_09_10_PL_ETC___d115[31:0];
    endcase
  end
  always@(write_dm_addr or
	  rg_sbaddress1_08_CONCAT_rg_sbaddress0_09_10_PL_ETC___d115 or
	  IF_write_dm_addr_EQ_0x39_66_THEN_rg_sbaddress1_ETC___d309)
  begin
    case (write_dm_addr)
      7'h39, 7'h3A:
	  MUX_rg_sbaddress1$write_1__VAL_2 =
	      IF_write_dm_addr_EQ_0x39_66_THEN_rg_sbaddress1_ETC___d309;
      default: MUX_rg_sbaddress1$write_1__VAL_2 =
		   rg_sbaddress1_08_CONCAT_rg_sbaddress0_09_10_PL_ETC___d115[63:32];
    endcase
  end
  always@(write_dm_word)
  begin
    case (write_dm_word[19:17])
      3'd3, 3'd4: MUX_rg_sbcs_sberror$write_1__VAL_4 = 3'd3;
      default: MUX_rg_sbcs_sberror$write_1__VAL_4 = 3'd0;
    endcase
  end

  // register rg_sb_state
  assign rg_sb_state$D_IN =
	     (EN_reset || WILL_FIRE_RL_rl_sb_read_finish) ? 2'd0 : 2'd1 ;
  assign rg_sb_state$EN =
	     EN_av_read && av_read_dm_addr == 7'h3C &&
	     rg_sb_state_EQ_0_8_AND_NOT_rg_sbcs_sbbusyerror_ETC___d121 ||
	     EN_write && write_dm_addr == 7'h39 &&
	     rg_sb_state_EQ_0_8_AND_NOT_rg_sbcs_sbbusyerror_ETC___d324 ||
	     WILL_FIRE_RL_rl_sb_read_finish ||
	     EN_reset ;

  // register rg_sbaddress0
  always@(EN_reset or
	  MUX_rg_sbaddress0$write_1__SEL_2 or
	  MUX_rg_sbaddress0$write_1__VAL_2 or
	  MUX_rg_sbaddress0$write_1__SEL_3 or
	  rg_sbaddress1_08_CONCAT_rg_sbaddress0_09_10_PL_ETC___d115)
  case (1'b1)
    EN_reset: rg_sbaddress0$D_IN = 32'd0;
    MUX_rg_sbaddress0$write_1__SEL_2:
	rg_sbaddress0$D_IN = MUX_rg_sbaddress0$write_1__VAL_2;
    MUX_rg_sbaddress0$write_1__SEL_3:
	rg_sbaddress0$D_IN =
	    rg_sbaddress1_08_CONCAT_rg_sbaddress0_09_10_PL_ETC___d115[31:0];
    default: rg_sbaddress0$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_sbaddress0$EN =
	     EN_av_read && av_read_dm_addr == 7'h3C &&
	     rg_sb_state_EQ_0_8_AND_NOT_rg_sbcs_sbbusyerror_ETC___d106 ||
	     MUX_rg_sbaddress0$write_1__SEL_2 ||
	     EN_reset ;

  // register rg_sbaddress1
  always@(EN_reset or
	  MUX_rg_sbaddress1$write_1__SEL_2 or
	  MUX_rg_sbaddress1$write_1__VAL_2 or
	  MUX_rg_sbaddress0$write_1__SEL_3 or
	  rg_sbaddress1_08_CONCAT_rg_sbaddress0_09_10_PL_ETC___d115)
  case (1'b1)
    EN_reset: rg_sbaddress1$D_IN = 32'd0;
    MUX_rg_sbaddress1$write_1__SEL_2:
	rg_sbaddress1$D_IN = MUX_rg_sbaddress1$write_1__VAL_2;
    MUX_rg_sbaddress0$write_1__SEL_3:
	rg_sbaddress1$D_IN =
	    rg_sbaddress1_08_CONCAT_rg_sbaddress0_09_10_PL_ETC___d115[63:32];
    default: rg_sbaddress1$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_sbaddress1$EN =
	     EN_av_read && av_read_dm_addr == 7'h3C &&
	     rg_sb_state_EQ_0_8_AND_NOT_rg_sbcs_sbbusyerror_ETC___d106 ||
	     MUX_rg_sbaddress1$write_1__SEL_2 ||
	     EN_reset ;

  // register rg_sbaddress_reading
  assign rg_sbaddress_reading$D_IN =
	     MUX_masterPortShim_arff$enq_1__SEL_1 ?
	       sbaddress__h630 :
	       addr64__h3970 ;
  assign rg_sbaddress_reading$EN =
	     EN_av_read && av_read_dm_addr == 7'h3C &&
	     rg_sb_state_EQ_0_8_AND_NOT_rg_sbcs_sbbusyerror_ETC___d121 ||
	     EN_write && write_dm_addr == 7'h39 &&
	     rg_sb_state_EQ_0_8_AND_NOT_rg_sbcs_sbbusyerror_ETC___d324 ;

  // register rg_sbcs_sbaccess
  assign rg_sbcs_sbaccess$D_IN = EN_reset ? 3'd2 : write_dm_word[19:17] ;
  assign rg_sbcs_sbaccess$EN =
	     EN_write &&
	     write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d264 ||
	     EN_reset ;

  // register rg_sbcs_sbautoincrement
  assign rg_sbcs_sbautoincrement$D_IN = !EN_reset && write_dm_word[16] ;
  assign rg_sbcs_sbautoincrement$EN =
	     EN_write &&
	     write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d264 ||
	     EN_reset ;

  // register rg_sbcs_sbbusyerror
  always@(EN_reset or
	  MUX_rg_sbcs_sbbusyerror$write_1__SEL_2 or
	  write_dm_addr or MUX_rg_sbcs_sbbusyerror$write_1__SEL_3)
  case (1'b1)
    EN_reset: rg_sbcs_sbbusyerror$D_IN = 1'd0;
    MUX_rg_sbcs_sbbusyerror$write_1__SEL_2:
	rg_sbcs_sbbusyerror$D_IN = write_dm_addr != 7'h38;
    MUX_rg_sbcs_sbbusyerror$write_1__SEL_3: rg_sbcs_sbbusyerror$D_IN = 1'd1;
    default: rg_sbcs_sbbusyerror$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign rg_sbcs_sbbusyerror$EN =
	     EN_av_read && av_read_dm_addr == 7'h3C && rg_sb_state != 2'd0 ||
	     EN_write &&
	     write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d273 ||
	     EN_reset ;

  // register rg_sbcs_sberror
  always@(EN_reset or
	  MUX_rg_sbcs_sberror$write_1__SEL_2 or
	  MUX_rg_sbcs_sberror$write_1__SEL_3 or
	  MUX_rg_sbcs_sberror$write_1__SEL_4 or
	  MUX_rg_sbcs_sberror$write_1__VAL_4)
  case (1'b1)
    EN_reset: rg_sbcs_sberror$D_IN = 3'd0;
    MUX_rg_sbcs_sberror$write_1__SEL_2 || MUX_rg_sbcs_sberror$write_1__SEL_3:
	rg_sbcs_sberror$D_IN = 3'd3;
    MUX_rg_sbcs_sberror$write_1__SEL_4:
	rg_sbcs_sberror$D_IN = MUX_rg_sbcs_sberror$write_1__VAL_4;
    default: rg_sbcs_sberror$D_IN = 3'b010 /* unspecified value */ ;
  endcase
  assign rg_sbcs_sberror$EN =
	     WILL_FIRE_RL_rl_sb_read_finish &&
	     masterPortShim_rff$D_OUT[3:2] != 2'd0 ||
	     masterPortShim_bff$EMPTY_N &&
	     masterPortShim_bff$D_OUT[1:0] != 2'd0 ||
	     EN_write &&
	     write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d281 ||
	     EN_reset ;

  // register rg_sbcs_sbreadonaddr
  assign rg_sbcs_sbreadonaddr$D_IN = !EN_reset && write_dm_word[20] ;
  assign rg_sbcs_sbreadonaddr$EN =
	     EN_write &&
	     write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d264 ||
	     EN_reset ;

  // register rg_sbcs_sbreadondata
  assign rg_sbcs_sbreadondata$D_IN = !EN_reset && write_dm_word[15] ;
  assign rg_sbcs_sbreadondata$EN =
	     EN_write &&
	     write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d264 ||
	     EN_reset ;

  // register rg_sbdata0
  always@(EN_reset or
	  WILL_FIRE_RL_rl_sb_read_finish or
	  IF_rg_sbcs_sbaccess_7_EQ_0_8_THEN_IF_rg_sbaddr_ETC___d88 or
	  MUX_rg_sbdata0$write_1__SEL_3 or write_dm_word)
  case (1'b1)
    EN_reset: rg_sbdata0$D_IN = 32'd0;
    WILL_FIRE_RL_rl_sb_read_finish:
	rg_sbdata0$D_IN =
	    IF_rg_sbcs_sbaccess_7_EQ_0_8_THEN_IF_rg_sbaddr_ETC___d88[31:0];
    MUX_rg_sbdata0$write_1__SEL_3: rg_sbdata0$D_IN = write_dm_word;
    default: rg_sbdata0$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_sbdata0$EN =
	     EN_write &&
	     write_dm_addr_EQ_0x3C_69_AND_rg_sb_state_EQ_0__ETC___d334 ||
	     WILL_FIRE_RL_rl_sb_read_finish ||
	     EN_reset ;

  // submodule masterPortShim_arff
  assign masterPortShim_arff$D_IN =
	     MUX_masterPortShim_arff$enq_1__SEL_1 ?
	       MUX_masterPortShim_arff$enq_1__VAL_1 :
	       MUX_masterPortShim_arff$enq_1__VAL_2 ;
  assign masterPortShim_arff$ENQ =
	     EN_av_read && av_read_dm_addr == 7'h3C &&
	     rg_sb_state_EQ_0_8_AND_NOT_rg_sbcs_sbbusyerror_ETC___d121 ||
	     EN_write && write_dm_addr == 7'h39 &&
	     rg_sb_state_EQ_0_8_AND_NOT_rg_sbcs_sbbusyerror_ETC___d324 ;
  assign masterPortShim_arff$DEQ = EN_master_ar_drop ;
  assign masterPortShim_arff$CLR = EN_reset ;

  // submodule masterPortShim_awff
  assign masterPortShim_awff$D_IN =
	     { 4'd0,
	       sbaddress__h630,
	       8'd0,
	       _theResult___snd_snd_val__h4720,
	       18'd65536 } ;
  assign masterPortShim_awff$ENQ =
	     EN_write &&
	     write_dm_addr_EQ_0x3C_69_AND_rg_sb_state_EQ_0__ETC___d334 ;
  assign masterPortShim_awff$DEQ = EN_master_aw_drop ;
  assign masterPortShim_awff$CLR = EN_reset ;

  // submodule masterPortShim_bff
  assign masterPortShim_bff$D_IN = master_b_put_val ;
  assign masterPortShim_bff$ENQ = EN_master_b_put ;
  assign masterPortShim_bff$DEQ = masterPortShim_bff$EMPTY_N ;
  assign masterPortShim_bff$CLR = EN_reset ;

  // submodule masterPortShim_rff
  assign masterPortShim_rff$D_IN = master_r_put_val ;
  assign masterPortShim_rff$ENQ = EN_master_r_put ;
  assign masterPortShim_rff$DEQ =
	     masterPortShim_rff$EMPTY_N && rg_sb_state == 2'd1 &&
	     rg_sbcs_sberror == 3'd0 ;
  assign masterPortShim_rff$CLR = EN_reset ;

  // submodule masterPortShim_wff
  assign masterPortShim_wff$D_IN =
	     { wrd_wdata__h4762, wrd_wstrb__h4763, 2'd2 } ;
  assign masterPortShim_wff$ENQ =
	     EN_write &&
	     write_dm_addr_EQ_0x3C_69_AND_rg_sb_state_EQ_0__ETC___d334 ;
  assign masterPortShim_wff$DEQ = EN_master_w_drop ;
  assign masterPortShim_wff$CLR = EN_reset ;

  // remaining internal signals
  assign IF_rg_sbcs_sbreadonaddr_32_THEN_IF_rg_sbcs_sba_ETC___d318 =
	     rg_sbcs_sbreadonaddr ?
	       (rg_sbcs_sbautoincrement ?
		  rg_sbaddress1_08_CONCAT_write_dm_word_06_PLUS__ETC___d307[31:0] :
		  write_dm_word) :
	       write_dm_word ;
  assign IF_write_dm_addr_EQ_0x39_66_THEN_rg_sbaddress1_ETC___d309 =
	     (write_dm_addr == 7'h39) ?
	       rg_sbaddress1_08_CONCAT_write_dm_word_06_PLUS__ETC___d307[63:32] :
	       write_dm_word ;
  assign _theResult___fst__h4705 = word64__h4650 << shift_bits__h4653 ;
  assign addr64__h3970 = { rg_sbaddress1, write_dm_word } ;
  assign result__h1228 = { 56'd0, masterPortShim_rff$D_OUT[11:4] } ;
  assign result__h1258 = { 56'd0, masterPortShim_rff$D_OUT[19:12] } ;
  assign result__h1285 = { 56'd0, masterPortShim_rff$D_OUT[27:20] } ;
  assign result__h1312 = { 56'd0, masterPortShim_rff$D_OUT[35:28] } ;
  assign result__h1339 = { 56'd0, masterPortShim_rff$D_OUT[43:36] } ;
  assign result__h1366 = { 56'd0, masterPortShim_rff$D_OUT[51:44] } ;
  assign result__h1393 = { 56'd0, masterPortShim_rff$D_OUT[59:52] } ;
  assign result__h1420 = { 56'd0, masterPortShim_rff$D_OUT[67:60] } ;
  assign result__h1465 = { 48'd0, masterPortShim_rff$D_OUT[19:4] } ;
  assign result__h1492 = { 48'd0, masterPortShim_rff$D_OUT[35:20] } ;
  assign result__h1519 = { 48'd0, masterPortShim_rff$D_OUT[51:36] } ;
  assign result__h1546 = { 48'd0, masterPortShim_rff$D_OUT[67:52] } ;
  assign result__h1587 = { 32'd0, masterPortShim_rff$D_OUT[35:4] } ;
  assign result__h1614 = { 32'd0, masterPortShim_rff$D_OUT[67:36] } ;
  assign rg_sb_state_EQ_0_8_AND_NOT_rg_sbcs_sbbusyerror_ETC___d106 =
	     rg_sb_state == 2'd0 && !rg_sbcs_sbbusyerror &&
	     rg_sbcs_sberror == 3'd0 &&
	     rg_sbcs_sbautoincrement ;
  assign rg_sb_state_EQ_0_8_AND_NOT_rg_sbcs_sbbusyerror_ETC___d121 =
	     rg_sb_state == 2'd0 && !rg_sbcs_sbbusyerror &&
	     rg_sbcs_sberror == 3'd0 &&
	     rg_sbcs_sbreadondata ;
  assign rg_sb_state_EQ_0_8_AND_NOT_rg_sbcs_sbbusyerror_ETC___d324 =
	     rg_sb_state == 2'd0 && !rg_sbcs_sbbusyerror &&
	     rg_sbcs_sberror == 3'd0 &&
	     rg_sbcs_sbreadonaddr ;
  assign rg_sbaddress1_08_CONCAT_rg_sbaddress0_09_10_PL_ETC___d115 =
	     sbaddress__h630 +
	     IF_rg_sbcs_sbaccess_7_EQ_0_8_THEN_1_ELSE_IF_rg_ETC___d114 ;
  assign rg_sbaddress1_08_CONCAT_write_dm_word_06_PLUS__ETC___d307 =
	     addr64__h3970 +
	     IF_rg_sbcs_sbaccess_7_EQ_0_8_THEN_1_ELSE_IF_rg_ETC___d114 ;
  assign rg_sbcs_sberror_EQ_0_AND_rg_sbcs_sbreadonaddr__ETC___d299 =
	     rg_sbcs_sberror == 3'd0 &&
	     (rg_sbcs_sbreadonaddr && rg_sbcs_sbautoincrement ||
	      write_dm_addr != 7'h39) ;
  assign sbaddress__h630 = { rg_sbaddress1, rg_sbaddress0 } ;
  assign shift_bits__h4653 = { rg_sbaddress0[2:0], 3'b0 } ;
  assign strobe64__h4703 = 8'b00000001 << rg_sbaddress0[2:0] ;
  assign strobe64__h4707 = 8'b00000011 << rg_sbaddress0[2:0] ;
  assign strobe64__h4711 = 8'b00001111 << rg_sbaddress0[2:0] ;
  assign v__h2261 =
	     { 9'd64,
	       rg_sbcs_sbbusyerror,
	       rg_sb_state != 2'd0,
	       rg_sbcs_sbreadonaddr,
	       rg_sbcs_sbaccess,
	       rg_sbcs_sbautoincrement,
	       rg_sbcs_sbreadondata,
	       rg_sbcs_sberror,
	       12'd2055 } ;
  assign v__h2374 =
	     (rg_sb_state != 2'd0 || rg_sbcs_sbbusyerror ||
	      rg_sbcs_sberror != 3'd0) ?
	       32'd0 :
	       rg_sbdata0 ;
  assign word64__h4650 = { 32'd0, write_dm_word } ;
  assign write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d264 =
	     write_dm_addr == 7'h38 &&
	     (rg_sbcs_sberror == 3'd0 || write_dm_word[14:12] != 3'd0) &&
	     (!rg_sbcs_sbbusyerror || write_dm_word[22]) &&
	     write_dm_word[19:17] != 3'd4 &&
	     write_dm_word[19:17] != 3'd3 ;
  assign write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d273 =
	     write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d264 ||
	     (write_dm_addr == 7'h39 || write_dm_addr == 7'h3A ||
	      write_dm_addr == 7'h3C) &&
	     rg_sb_state != 2'd0 ;
  assign write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d279 =
	     write_dm_addr == 7'h38 &&
	     (rg_sbcs_sberror == 3'd0 || write_dm_word[14:12] != 3'd0) &&
	     rg_sbcs_sbbusyerror &&
	     !write_dm_word[22] ;
  assign write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d281 =
	     write_dm_addr == 7'h38 &&
	     (rg_sbcs_sberror == 3'd0 || write_dm_word[14:12] != 3'd0) &&
	     (!rg_sbcs_sbbusyerror || write_dm_word[22]) ;
  assign write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d286 =
	     write_dm_addr == 7'h38 &&
	     (rg_sbcs_sberror == 3'd0 || write_dm_word[14:12] != 3'd0) &&
	     (!rg_sbcs_sbbusyerror || write_dm_word[22]) &&
	     (write_dm_word[19:17] == 3'd4 || write_dm_word[19:17] == 3'd3) ;
  assign write_dm_addr_EQ_0x3C_69_AND_rg_sb_state_EQ_0__ETC___d334 =
	     write_dm_addr == 7'h3C && rg_sb_state == 2'd0 &&
	     !rg_sbcs_sbbusyerror &&
	     rg_sbcs_sberror == 3'd0 ;
  always@(rg_sbcs_sbaccess)
  begin
    case (rg_sbcs_sbaccess)
      3'd0, 3'd1, 3'd2, 3'd3:
	  _theResult___snd_snd_val__h4720 = rg_sbcs_sbaccess;
      default: _theResult___snd_snd_val__h4720 = 3'b111;
    endcase
  end
  always@(rg_sbcs_sbaccess or
	  strobe64__h4703 or strobe64__h4707 or strobe64__h4711)
  begin
    case (rg_sbcs_sbaccess)
      3'd0: wrd_wstrb__h4763 = strobe64__h4703;
      3'd1: wrd_wstrb__h4763 = strobe64__h4707;
      3'd2: wrd_wstrb__h4763 = strobe64__h4711;
      3'd3: wrd_wstrb__h4763 = 8'b11111111;
      default: wrd_wstrb__h4763 = 8'd0;
    endcase
  end
  always@(rg_sbcs_sbaccess or word64__h4650 or _theResult___fst__h4705)
  begin
    case (rg_sbcs_sbaccess)
      3'd0, 3'd1, 3'd2: wrd_wdata__h4762 = _theResult___fst__h4705;
      default: wrd_wdata__h4762 = word64__h4650;
    endcase
  end
  always@(rg_sbcs_sbaccess)
  begin
    case (rg_sbcs_sbaccess)
      3'd0: IF_rg_sbcs_sbaccess_7_EQ_0_8_THEN_1_ELSE_IF_rg_ETC___d114 = 64'd1;
      3'd1: IF_rg_sbcs_sbaccess_7_EQ_0_8_THEN_1_ELSE_IF_rg_ETC___d114 = 64'd2;
      3'd2: IF_rg_sbcs_sbaccess_7_EQ_0_8_THEN_1_ELSE_IF_rg_ETC___d114 = 64'd4;
      3'd3: IF_rg_sbcs_sbaccess_7_EQ_0_8_THEN_1_ELSE_IF_rg_ETC___d114 = 64'd8;
      default: IF_rg_sbcs_sbaccess_7_EQ_0_8_THEN_1_ELSE_IF_rg_ETC___d114 =
		   64'd16;
    endcase
  end
  always@(rg_sbaddress_reading or
	  result__h1228 or
	  result__h1258 or
	  result__h1285 or
	  result__h1312 or
	  result__h1339 or result__h1366 or result__h1393 or result__h1420)
  begin
    case (rg_sbaddress_reading[2:0])
      3'h0:
	  IF_rg_sbaddress_reading_9_BITS_2_TO_0_0_EQ_0x0_ETC___d62 =
	      result__h1228;
      3'h1:
	  IF_rg_sbaddress_reading_9_BITS_2_TO_0_0_EQ_0x0_ETC___d62 =
	      result__h1258;
      3'h2:
	  IF_rg_sbaddress_reading_9_BITS_2_TO_0_0_EQ_0x0_ETC___d62 =
	      result__h1285;
      3'h3:
	  IF_rg_sbaddress_reading_9_BITS_2_TO_0_0_EQ_0x0_ETC___d62 =
	      result__h1312;
      3'h4:
	  IF_rg_sbaddress_reading_9_BITS_2_TO_0_0_EQ_0x0_ETC___d62 =
	      result__h1339;
      3'h5:
	  IF_rg_sbaddress_reading_9_BITS_2_TO_0_0_EQ_0x0_ETC___d62 =
	      result__h1366;
      3'h6:
	  IF_rg_sbaddress_reading_9_BITS_2_TO_0_0_EQ_0x0_ETC___d62 =
	      result__h1393;
      3'h7:
	  IF_rg_sbaddress_reading_9_BITS_2_TO_0_0_EQ_0x0_ETC___d62 =
	      result__h1420;
    endcase
  end
  always@(rg_sbaddress_reading or
	  result__h1465 or result__h1492 or result__h1519 or result__h1546)
  begin
    case (rg_sbaddress_reading[2:0])
      3'h0:
	  IF_rg_sbaddress_reading_9_BITS_2_TO_0_0_EQ_0x0_ETC___d75 =
	      result__h1465;
      3'h2:
	  IF_rg_sbaddress_reading_9_BITS_2_TO_0_0_EQ_0x0_ETC___d75 =
	      result__h1492;
      3'h4:
	  IF_rg_sbaddress_reading_9_BITS_2_TO_0_0_EQ_0x0_ETC___d75 =
	      result__h1519;
      3'h6:
	  IF_rg_sbaddress_reading_9_BITS_2_TO_0_0_EQ_0x0_ETC___d75 =
	      result__h1546;
      default: IF_rg_sbaddress_reading_9_BITS_2_TO_0_0_EQ_0x0_ETC___d75 =
		   64'd0;
    endcase
  end
  always@(rg_sbaddress_reading or result__h1587 or result__h1614)
  begin
    case (rg_sbaddress_reading[2:0])
      3'h0:
	  CASE_rg_sbaddress_reading_BITS_2_TO_0_0x0_resu_ETC__q1 =
	      result__h1587;
      3'h4:
	  CASE_rg_sbaddress_reading_BITS_2_TO_0_0x0_resu_ETC__q1 =
	      result__h1614;
      default: CASE_rg_sbaddress_reading_BITS_2_TO_0_0x0_resu_ETC__q1 = 64'd0;
    endcase
  end
  always@(rg_sbcs_sbaccess or
	  IF_rg_sbaddress_reading_9_BITS_2_TO_0_0_EQ_0x0_ETC___d62 or
	  IF_rg_sbaddress_reading_9_BITS_2_TO_0_0_EQ_0x0_ETC___d75 or
	  CASE_rg_sbaddress_reading_BITS_2_TO_0_0x0_resu_ETC__q1 or
	  rg_sbaddress_reading or masterPortShim_rff$D_OUT)
  begin
    case (rg_sbcs_sbaccess)
      3'd0:
	  IF_rg_sbcs_sbaccess_7_EQ_0_8_THEN_IF_rg_sbaddr_ETC___d88 =
	      IF_rg_sbaddress_reading_9_BITS_2_TO_0_0_EQ_0x0_ETC___d62;
      3'd1:
	  IF_rg_sbcs_sbaccess_7_EQ_0_8_THEN_IF_rg_sbaddr_ETC___d88 =
	      IF_rg_sbaddress_reading_9_BITS_2_TO_0_0_EQ_0x0_ETC___d75;
      3'd2:
	  IF_rg_sbcs_sbaccess_7_EQ_0_8_THEN_IF_rg_sbaddr_ETC___d88 =
	      CASE_rg_sbaddress_reading_BITS_2_TO_0_0x0_resu_ETC__q1;
      3'd3:
	  IF_rg_sbcs_sbaccess_7_EQ_0_8_THEN_IF_rg_sbaddr_ETC___d88 =
	      (rg_sbaddress_reading[2:0] == 3'h0) ?
		masterPortShim_rff$D_OUT[67:4] :
		64'd0;
      default: IF_rg_sbcs_sbaccess_7_EQ_0_8_THEN_IF_rg_sbaddr_ETC___d88 =
		   64'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_sbaddress0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_sbaddress1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (rg_sbaddress0$EN)
	  rg_sbaddress0 <= `BSV_ASSIGNMENT_DELAY rg_sbaddress0$D_IN;
	if (rg_sbaddress1$EN)
	  rg_sbaddress1 <= `BSV_ASSIGNMENT_DELAY rg_sbaddress1$D_IN;
      end
    if (rg_sb_state$EN) rg_sb_state <= `BSV_ASSIGNMENT_DELAY rg_sb_state$D_IN;
    if (rg_sbaddress_reading$EN)
      rg_sbaddress_reading <= `BSV_ASSIGNMENT_DELAY rg_sbaddress_reading$D_IN;
    if (rg_sbcs_sbaccess$EN)
      rg_sbcs_sbaccess <= `BSV_ASSIGNMENT_DELAY rg_sbcs_sbaccess$D_IN;
    if (rg_sbcs_sbautoincrement$EN)
      rg_sbcs_sbautoincrement <= `BSV_ASSIGNMENT_DELAY
	  rg_sbcs_sbautoincrement$D_IN;
    if (rg_sbcs_sbbusyerror$EN)
      rg_sbcs_sbbusyerror <= `BSV_ASSIGNMENT_DELAY rg_sbcs_sbbusyerror$D_IN;
    if (rg_sbcs_sberror$EN)
      rg_sbcs_sberror <= `BSV_ASSIGNMENT_DELAY rg_sbcs_sberror$D_IN;
    if (rg_sbcs_sbreadonaddr$EN)
      rg_sbcs_sbreadonaddr <= `BSV_ASSIGNMENT_DELAY rg_sbcs_sbreadonaddr$D_IN;
    if (rg_sbcs_sbreadondata$EN)
      rg_sbcs_sbreadondata <= `BSV_ASSIGNMENT_DELAY rg_sbcs_sbreadondata$D_IN;
    if (rg_sbdata0$EN) rg_sbdata0 <= `BSV_ASSIGNMENT_DELAY rg_sbdata0$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_sb_state = 2'h2;
    rg_sbaddress0 = 32'hAAAAAAAA;
    rg_sbaddress1 = 32'hAAAAAAAA;
    rg_sbaddress_reading = 64'hAAAAAAAAAAAAAAAA;
    rg_sbcs_sbaccess = 3'h2;
    rg_sbcs_sbautoincrement = 1'h0;
    rg_sbcs_sbbusyerror = 1'h0;
    rg_sbcs_sberror = 3'h2;
    rg_sbcs_sbreadonaddr = 1'h0;
    rg_sbcs_sbreadondata = 1'h0;
    rg_sbdata0 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h3C && rg_sb_state == 2'd0 &&
	  rg_sbcs_sbbusyerror)
	$display("DM_System_Bus.sbdata.read: ignoring due to sbbusyerror");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h3C && rg_sb_state == 2'd0 &&
	  !rg_sbcs_sbbusyerror &&
	  rg_sbcs_sberror != 3'd0)
	$display("DM_System_Bus.sbdata.read: ignoring due to sberror = 0x%0h",
		 rg_sbcs_sberror);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h3C && rg_sb_state != 2'd0)
	$display("DM_System_Bus.sbdata.read: busy, setting sbbusyerror");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr != 7'h38 &&
	  av_read_dm_addr != 7'h39 &&
	  av_read_dm_addr != 7'h3A &&
	  av_read_dm_addr != 7'h3C)
	$write("DM_System_Bus.read: [");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h10) $write("dm_addr_dmcontrol");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h11) $write("dm_addr_dmstatus");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h12) $write("dm_addr_hartinfo");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h13) $write("dm_addr_haltsum");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h14)
	$write("dm_addr_hawindowsel");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h15) $write("dm_addr_hawindow");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h19)
	$write("dm_addr_devtreeaddr0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h30) $write("dm_addr_authdata");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h40)
	$write("dm_addr_haltregion0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h5F)
	$write("dm_addr_haltregion31");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h60) $write("dm_addr_verbosity");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h16)
	$write("dm_addr_abstractcs");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h17) $write("dm_addr_command");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h04) $write("dm_addr_data0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h05) $write("dm_addr_data1");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h06) $write("dm_addr_data2");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h07) $write("dm_addr_data3");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h08) $write("dm_addr_data4");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h09) $write("dm_addr_data5");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h0A) $write("dm_addr_data6");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h0B) $write("dm_addr_data7");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h0C) $write("dm_addr_data8");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h0D) $write("dm_addr_data9");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h0F) $write("dm_addr_data11");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h18)
	$write("dm_addr_abstractauto");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h20) $write("dm_addr_progbuf0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h3B)
	$write("dm_addr_sbaddress2");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h3D) $write("dm_addr_sbdata1");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h3E) $write("dm_addr_sbdata2");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h3F) $write("dm_addr_sbdata3");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr != 7'h38 &&
	  av_read_dm_addr != 7'h39 &&
	  av_read_dm_addr != 7'h3A &&
	  av_read_dm_addr != 7'h3C &&
	  av_read_dm_addr != 7'h10 &&
	  av_read_dm_addr != 7'h11 &&
	  av_read_dm_addr != 7'h12 &&
	  av_read_dm_addr != 7'h13 &&
	  av_read_dm_addr != 7'h14 &&
	  av_read_dm_addr != 7'h15 &&
	  av_read_dm_addr != 7'h19 &&
	  av_read_dm_addr != 7'h30 &&
	  av_read_dm_addr != 7'h40 &&
	  av_read_dm_addr != 7'h5F &&
	  av_read_dm_addr != 7'h60 &&
	  av_read_dm_addr != 7'h16 &&
	  av_read_dm_addr != 7'h17 &&
	  av_read_dm_addr != 7'h04 &&
	  av_read_dm_addr != 7'h05 &&
	  av_read_dm_addr != 7'h06 &&
	  av_read_dm_addr != 7'h07 &&
	  av_read_dm_addr != 7'h08 &&
	  av_read_dm_addr != 7'h09 &&
	  av_read_dm_addr != 7'h0A &&
	  av_read_dm_addr != 7'h0B &&
	  av_read_dm_addr != 7'h0C &&
	  av_read_dm_addr != 7'h0D &&
	  av_read_dm_addr != 7'h0F &&
	  av_read_dm_addr != 7'h18 &&
	  av_read_dm_addr != 7'h20 &&
	  av_read_dm_addr != 7'h3B &&
	  av_read_dm_addr != 7'h3D &&
	  av_read_dm_addr != 7'h3E &&
	  av_read_dm_addr != 7'h3F)
	$write("<Unknown dm_abstract_command dm_addr 0x%0h>",
	       av_read_dm_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr != 7'h38 &&
	  av_read_dm_addr != 7'h39 &&
	  av_read_dm_addr != 7'h3A &&
	  av_read_dm_addr != 7'h3C)
	$write("] not supported", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h38 && rg_sbcs_sberror != 3'd0 &&
	  write_dm_word[14:12] == 3'd0)
	$display("DM_System_Bus.sbcs_write <= 0x%08h: ERROR", write_dm_word);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h38 && rg_sbcs_sberror != 3'd0 &&
	  write_dm_word[14:12] == 3'd0)
	$display("    ERROR: existing sberror (0x%0h) is not being cleared.",
		 rg_sbcs_sberror);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h38 && rg_sbcs_sberror != 3'd0 &&
	  write_dm_word[14:12] == 3'd0)
	$display("    Must be cleared to re-enable system bus access.");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write &&
	  write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d279)
	$display("DM_System_Bus.sbcs_write <= 0x%08h: ERROR", write_dm_word);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write &&
	  write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d279)
	$display("    ERROR: existing sbbusyerror (%0d) is not being cleared.",
		 rg_sbcs_sbbusyerror);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write &&
	  write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d279)
	$display("    Must be cleared to re-enable system bus access.");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write &&
	  write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d286)
	$display("DM_System_Bus.sbcs_write <= 0x%08h: ERROR", write_dm_word);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write &&
	  write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d286)
	$write("    ERROR: sbaccess ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h38 &&
	  (rg_sbcs_sberror == 3'd0 || write_dm_word[14:12] != 3'd0) &&
	  (!rg_sbcs_sbbusyerror || write_dm_word[22]) &&
	  write_dm_word[19:17] == 3'd3)
	$write("DM_SBACCESS_64_BIT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h38 &&
	  (rg_sbcs_sberror == 3'd0 || write_dm_word[14:12] != 3'd0) &&
	  (!rg_sbcs_sbbusyerror || write_dm_word[22]) &&
	  write_dm_word[19:17] == 3'd4)
	$write("DM_SBACCESS_128_BIT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write &&
	  write_dm_addr_EQ_0x38_49_AND_rg_sbcs_sberror_E_ETC___d286)
	$write(" not supported", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr != 7'h38 &&
	  (write_dm_addr == 7'h39 || write_dm_addr == 7'h3A) &&
	  rg_sb_state == 2'd0 &&
	  rg_sbcs_sbbusyerror)
	$display("DM_System_Bus.sbaddress.write: ignoring due to sbbusyerror");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr != 7'h38 &&
	  (write_dm_addr == 7'h39 || write_dm_addr == 7'h3A) &&
	  rg_sb_state == 2'd0 &&
	  !rg_sbcs_sbbusyerror &&
	  rg_sbcs_sberror != 3'd0)
	$display("DM_System_Bus.sbaddress.write: ignoring due to sberror = 0x%0h",
		 rg_sbcs_sberror);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr != 7'h38 &&
	  (write_dm_addr == 7'h39 || write_dm_addr == 7'h3A) &&
	  rg_sb_state != 2'd0)
	$display("DM_System_Bus.sbaddress.write: busy, setting sbbusyerror");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h3C && rg_sb_state == 2'd0 &&
	  rg_sbcs_sbbusyerror)
	$display("DM_System_Bus.sbdata.write: ignoring due to sbbusyerror");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h3C && rg_sb_state == 2'd0 &&
	  !rg_sbcs_sbbusyerror &&
	  rg_sbcs_sberror != 3'd0)
	$display("DM_System_Bus.sbdata.write: ignoring due to sberror = 0x%0h",
		 rg_sbcs_sberror);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h3C && rg_sb_state != 2'd0)
	$display("DM_System_Bus.sbdata.write: busy, setting sbbusyerror");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr != 7'h38 && write_dm_addr != 7'h39 &&
	  write_dm_addr != 7'h3A &&
	  write_dm_addr != 7'h3C)
	$write("DM_System_Bus.write: [");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h10) $write("dm_addr_dmcontrol");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h11) $write("dm_addr_dmstatus");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h12) $write("dm_addr_hartinfo");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h13) $write("dm_addr_haltsum");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h14) $write("dm_addr_hawindowsel");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h15) $write("dm_addr_hawindow");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h19) $write("dm_addr_devtreeaddr0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h30) $write("dm_addr_authdata");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h40) $write("dm_addr_haltregion0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h5F) $write("dm_addr_haltregion31");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h60) $write("dm_addr_verbosity");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h16) $write("dm_addr_abstractcs");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h17) $write("dm_addr_command");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h04) $write("dm_addr_data0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h05) $write("dm_addr_data1");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h06) $write("dm_addr_data2");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h07) $write("dm_addr_data3");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h08) $write("dm_addr_data4");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h09) $write("dm_addr_data5");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h0A) $write("dm_addr_data6");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h0B) $write("dm_addr_data7");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h0C) $write("dm_addr_data8");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h0D) $write("dm_addr_data9");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h0F) $write("dm_addr_data11");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h18) $write("dm_addr_abstractauto");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h20) $write("dm_addr_progbuf0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h3B) $write("dm_addr_sbaddress2");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h3D) $write("dm_addr_sbdata1");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h3E) $write("dm_addr_sbdata2");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h3F) $write("dm_addr_sbdata3");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr != 7'h38 && write_dm_addr != 7'h39 &&
	  write_dm_addr != 7'h3A &&
	  write_dm_addr != 7'h3C &&
	  write_dm_addr != 7'h10 &&
	  write_dm_addr != 7'h11 &&
	  write_dm_addr != 7'h12 &&
	  write_dm_addr != 7'h13 &&
	  write_dm_addr != 7'h14 &&
	  write_dm_addr != 7'h15 &&
	  write_dm_addr != 7'h19 &&
	  write_dm_addr != 7'h30 &&
	  write_dm_addr != 7'h40 &&
	  write_dm_addr != 7'h5F &&
	  write_dm_addr != 7'h60 &&
	  write_dm_addr != 7'h16 &&
	  write_dm_addr != 7'h17 &&
	  write_dm_addr != 7'h04 &&
	  write_dm_addr != 7'h05 &&
	  write_dm_addr != 7'h06 &&
	  write_dm_addr != 7'h07 &&
	  write_dm_addr != 7'h08 &&
	  write_dm_addr != 7'h09 &&
	  write_dm_addr != 7'h0A &&
	  write_dm_addr != 7'h0B &&
	  write_dm_addr != 7'h0C &&
	  write_dm_addr != 7'h0D &&
	  write_dm_addr != 7'h0F &&
	  write_dm_addr != 7'h18 &&
	  write_dm_addr != 7'h20 &&
	  write_dm_addr != 7'h3B &&
	  write_dm_addr != 7'h3D &&
	  write_dm_addr != 7'h3E &&
	  write_dm_addr != 7'h3F)
	$write("<Unknown dm_abstract_command dm_addr 0x%0h>", write_dm_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr != 7'h38 && write_dm_addr != 7'h39 &&
	  write_dm_addr != 7'h3A &&
	  write_dm_addr != 7'h3C)
	$write("] <= 0x%08h; addr not supported", write_dm_word, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  masterPortShim_rff$D_OUT[3:2] != 2'd0)
	$display("DM_System_Bus.rule_sb_read_finish: setting rg_sbcs_sberror to DM_SBERROR_OTHER\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  masterPortShim_rff$D_OUT[3:2] != 2'd0)
	$write("    rdr = ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  masterPortShim_rff$D_OUT[3:2] != 2'd0)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  masterPortShim_rff$D_OUT[3:2] != 2'd0)
	$write("'h%h", masterPortShim_rff$D_OUT[71:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  masterPortShim_rff$D_OUT[3:2] != 2'd0)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  masterPortShim_rff$D_OUT[3:2] != 2'd0)
	$write("'h%h", masterPortShim_rff$D_OUT[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  masterPortShim_rff$D_OUT[3:2] != 2'd0)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  masterPortShim_rff$D_OUT[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  masterPortShim_rff$D_OUT[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  masterPortShim_rff$D_OUT[3:2] != 2'd1 &&
	  masterPortShim_rff$D_OUT[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  masterPortShim_rff$D_OUT[3:2] != 2'd0)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  masterPortShim_rff$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  masterPortShim_rff$D_OUT[3:2] != 2'd0 &&
	  !masterPortShim_rff$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  masterPortShim_rff$D_OUT[3:2] != 2'd0)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  masterPortShim_rff$D_OUT[3:2] != 2'd0)
	$write("'h%h", masterPortShim_rff$D_OUT[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  masterPortShim_rff$D_OUT[3:2] != 2'd0)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkDM_System_Bus

